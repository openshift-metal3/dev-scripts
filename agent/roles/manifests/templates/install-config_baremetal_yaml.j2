{% import 'net_macros.yaml' as net %}
apiVersion: v1
baseDomain: {{ base_domain }}
compute:
- hyperthreading: Enabled
  name: worker
  replicas: {{ num_workers }} 
  architecture: {{ goCPUArchitecture }}
controlPlane:
  architecture: {{ goCPUArchitecture }}
  hyperthreading: Enabled
  name: master
  replicas: {{ num_masters }} 
fips: {{ fips_mode }}
metadata:
  name: {{ cluster_name }} 
{% if boot_mode != "DISKIMAGE" %}
  namespace: {{ cluster_namespace }}
{% endif %}
networking:
{% if ip_stack == "v4" %}
  clusterNetwork:
  - cidr: {{ cluster_subnet_v4 }}
    hostPrefix: {{ cluster_host_prefix_v4 }}
  machineNetwork:
  - cidr: {{ external_subnet_v4 }}
  serviceNetwork:
  - {{ service_subnet_v4 }}
{% elif ip_stack == "v6" %}
  clusterNetwork:
  - cidr: {{ cluster_subnet_v6 }}
    hostPrefix: {{ cluster_host_prefix_v6 }}
  machineNetwork:
  - cidr: {{ external_subnet_v6 }}
  serviceNetwork:
  - {{ service_subnet_v6 }}
{% else %}
  clusterNetwork:
  - cidr: {{ cluster_subnet_v4 }}
    hostPrefix: {{ cluster_host_prefix_v4 }}
  - cidr: {{ cluster_subnet_v6 }}
    hostPrefix: {{ cluster_host_prefix_v6 }}
  machineNetwork:
  - cidr: {{ external_subnet_v4 }}
  - cidr: {{ external_subnet_v6 }}
  serviceNetwork:
  - {{ service_subnet_v4 }}
  - {{ service_subnet_v6 }}
{% endif %}
  networkType: {{ network_type }} 
platform:
{% set macs = agent_nodes_macs.split(',') %}
{% set hostnames = agent_nodes_hostnames.split(',') %}
{% set ips = agent_nodes_ips.split(',') %}
{% set ipsv6 = agent_nodes_ipsv6.split(',') %}
  baremetal:
    apiVIPs:
{% set a_vips = api_vips.split(',') %}
{% for api_vip in a_vips %}
      - {{ api_vip }}
{% endfor %}
    ingressVIPs:
{% set i_vips = ingress_vips.split(',') %}
{% for ingress_vip in i_vips %}
      - {{ ingress_vip }}
{% endfor %}
{% if agent_install_config_bm_hosts == "true" %}
{% set bmc_addresses = agent_nodes_bmc_addresses.split(',') %}
{% set bmc_passwords = agent_nodes_bmc_passwords.split(',') %}
{% set bmc_usernames = agent_nodes_bmc_usernames.split(',') %}
    provisioningHostIP: {{ cluster_provisioning_ip }}
    provisioningNetworkInterface: {{ cluster_provisioning_interface }}
    provisioningNetworkCIDR: {{ provisioning_network }}
    provisioningNetwork: {{ provisioning_network_profile }}
    hosts:
{% for hostname in hostnames %}
    - name: {{ hostname }}
      bootMACAddress: {{ macs[loop.index0] }}
      bmc:
        address: {{ bmc_addresses[loop.index0] }}
        username: {{ bmc_usernames[loop.index0] }}
        password: {{ bmc_passwords[loop.index0] }}
        disableCertificateVerification: false
      networkConfig:
        interfaces:
      {{ net.interfaces("eth0", macs[loop.index0])|indent(4, True) }}
{% if ip_stack == "v4" %}
            ipv4:
          {{ net.ip(networking_mode, ips[loop.index0], external_subnet_v4_prefixlen)|indent(4, True) }}
    {{ net.dns(provisioning_host_external_ip)|indent(4, True)  }}
    {{ net.route("eth0", "0.0.0.0/0", provisioning_host_external_ip)|indent(4, True) }}
{% elif ip_stack == "v6" %}
            ipv6:
          {{ net.ip(networking_mode, ipsv6[loop.index0], external_subnet_v6_prefixlen)|indent(4, True) }}
    {{ net.dns(provisioning_host_external_ip)|indent(4, True) }}
    {{ net.route("eth0", "::/0", provisioning_host_external_ip)|indent(4, True) }}
{% else %}
            ipv4:
          {{ net.ip(networking_mode, ips[loop.index0], external_subnet_v4_prefixlen)|indent(4, True) }}
            ipv6:
          {{ net.ip(networking_mode, ipsv6[loop.index0], external_subnet_v6_prefixlen)|indent(4, True) }}
    {{ net.dns_dualstack(provisioning_host_external_ip, provisioning_host_external_ip_dualstack)|indent(4, True) }}
    {{ net.route_dualstack("eth0", provisioning_host_external_ip, provisioning_host_external_ip_dualstack)|indent(4, True) }}
{% endif %}
{% endfor %}
{% endif %}
pullSecret: {{ pull_secret_contents }}
sshKey: {{ ssh_pub_key }} 
{% if mirror_images %}
imageContentSources:
{{ image_content_sources }}
{% if (mirror_command == "oc-mirror") and (agent_deploy_mce == "true") %}
- mirrors:
    - "{{ local_registry_dns_name }}:{{ local_registry_port }}/multicluster-engine"
  source: "registry.redhat.io/multicluster-engine"
- mirrors:
    - "{{ local_registry_dns_name }}:{{ local_registry_port }}/rhel8"
  source: "registry.redhat.io/rhel8"
- mirrors:
    - "{{ local_registry_dns_name }}:{{ local_registry_port }}/redhat"
  source: "registry.redhat.io/redhat"
{% endif %}
additionalTrustBundle: {{ ca_bundle_crt }}
{% endif %}
